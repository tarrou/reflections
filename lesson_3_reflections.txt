When would you want to use a remote repository rather than keeping all your 
work local?

Well, it's a backup. So that's cool. More importantly, though, it can be used 
on lots of computers, so collaboration and moving around is easy.

--------------------------------------------------------------------------------
Why might you want to always pull changes manually rather than having Git 
automatically stay up-to-date with your remote repository?

You don't want code someone else is writing to interfere with yours.

--------------------------------------------------------------------------------
Describe the differences between forks, clones, and branches. When would you 
use one instead of another?

A branch is within a project, starting a new line of commits that may or may 
not be part of original program. Clones are copies of the entire project (up to 
some commit) that are local. They may come from another local source, or they 
may come from GitHub. Finally, forks are clones, but both copies are on GitHub 
itself. Usually, the original is owned by someone else and you want a copy to 
work on without messing theirs up.

--------------------------------------------------------------------------------
What is the benefit of having a copy of the last known state of the remote 
stored locally?

You don't need internet access to, well, access it. You also have the most 
recent version of the work, so you don't duplicate or run into complicated 
merge conflicts.

--------------------------------------------------------------------------------
How would you collaborate without using Git or GitHub? What would be easier, 
and what would be harder?

I'd probably set up a directory on a shared drive or something. It would be 
harder because we couldn't update at the same time and restore to a certain 
point. It'd be easier becuase everyone know how to use a file system.


--------------------------------------------------------------------------------
When would you want to make changes in a separate branch rather than directly 
in master? What benefits does each approach have?

Two biggies: when I'm making a large change or expermenting with something and 
when I'm collaborating, so that someone can confirm my pull requests.


--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
